#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define KEY_U 0
#define KEY_E 1
#define KEY_O 2
#define KEY_A 3

#define KEY_S 4
#define KEY_N 5
#define KEY_T 6
#define KEY_H 7

#define NAV     1
#define MOUSE   2
#define NUMBER  3
#define PAREN   4
#define SYMBOL  5
#define EXTRA   6
#define BT_SEL  7

#define TIMEOUT_COMBO_2 175
#define TIMEOUT_COMBO_3 175
#define TIMEOUT_COMBO_4 175
#define TIMEOUT_LAYER_HOLD 200
#define TIMEOUT_STICKY_LEADER_KEY 5000

#define KEY_U 0
#define KEY_E 1
#define KEY_O 2
#define KEY_A 3
#define KEY_S 4
#define KEY_N 5
#define KEY_T 6
#define KEY_H 7

&sk {
    release-after-ms = <TIMEOUT_STICKY_LEADER_KEY>;
};
&sl {
    release-after-ms = <TIMEOUT_STICKY_LEADER_KEY>;
};

/ {
    keymap {
        compatible = "zmk, keymap";

        default {
        // -----------------
        // | A | O | E | U |
        // | H | T | N | S |
        // -----------------
            label = "ARDUX";
            bindings = <
                &layer_numbers_kp NUMBER A  &kp O   &kp E   &layer_parentheticals_kp PAREN U
                &layer_extra_kp EXTRA S     &kp N   &kp T   &layer_symbols_kp SYMBOL H
            >;
        };

        navigation {
        // -----------------
        // |pg+|hom|up |end|
        // |pg-|lft|dn |rgh|
        // -----------------
            label = "Navigation";
            bindings = <
                &kp PG_UP   &kp HOME   &kp UP     &kp END 
                &kp PG_DN   &kp LEFT   &kp DOWN   &kp RIGHT 
            >;
        };

        //mouse_layer {
        //// -----------------
        //// |sc+|bt2|up |bt1|
        //// |sc-|lft|dn |rgh|
        //// -----------------
        //    label = "Mouse";
        //    bindings = <
        //    &kp A   &kp 3   &kp 2   &kp 1
        //    &kp H   &kp 6   &kp 5   &kp 4
        //    >;
        //};

        number {
        //         8   7
        // -----------------
        // |   | 3 | 2 | 1 |
        // |   | 6 | 5 | 4 |
        // -----------------
        //         0   9
            label = "Number";
            bindings = <
                &mo NUMBER  &kp N3   &kp N2   &kp N1
                &none       &kp N6   &kp N5   &kp N4
            >;
        };

        parenthesis {
        // -----------------
        // | { | [ | ( |   |
        // | } | ] | ) |   |
        // -----------------
            label = "Parenthesis";
            bindings = <
                &kp LBRC   &kp LBKT   &kp LPAR   &mo PAREN
                &kp RBRC   &kp RBKT   &kp RPAR   &kp N4
            >;
        };

        symbols {
        // -----------------
        // | ` | ; | \ | ! |
        // | = | - | ? |   |
        // -----------------
            label = "Symbol";
            bindings = <
                &kp GRAVE   &kp SEMI    &kp BSLSH   &kp EXCL
                &kp EQUAL   &kp MINUS   &kp QMARK   &mo SYMBOL
            >;
        };

        extra {
        // -----------------
        // |   |v +|ins|mut|
        // |   |v -|psr|   |
        // -----------------
            label = "Extra";
            bindings = <
                &bootloader &kp K_VOL_UP   &kp INS     &kp K_MUTE 
                &mo EXTRA   &kp K_VOL_DN   &kp PSCRN   &none
            >;
        };

        bluetooth {
        // -----------------
        // |bt |pr3|pr2|pr1|
        // |usb|pr6|pr5|pr4|
        // -----------------
            label = "Bluetooth";
            bindings = <
                &out OUT_BLE   &bt BT_SEL 2   &bt BT_SEL 1   &bt BT_SEL 0
                &out OUT_USB   &bt BT_SEL 5   &bt BT_SEL 4   &bt BT_SEL 3
            >;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";
		/*****************************************
		 * 2 key combos
		 *****************************************/
		// Function layer doesn't apply to non-big ardux presently
		combo_enter      { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_A KEY_H>; bindings = <&kp ENTER>; };
		combo_control    { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_A KEY_S>; bindings = <&sk LCTRL>; };
		combo_gui        { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_A KEY_N>; bindings = <&sk LGUI>; };
		combo_alt        { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_A KEY_T>; bindings = <&sk LALT>; };
		combo_backspace  { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_E KEY_S>; bindings = <&kp BACKSPACE>; };
		combo_delete     { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_E KEY_T>; bindings = <&kp DELETE>; };
		combo_shift_lock { timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_E KEY_N>; bindings = <&kt LSHFT>; };

		combo_b           { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_S KEY_H>; bindings = <&kp B>; };
		combo_c           { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_S KEY_N>; bindings = <&kp C>; };
		combo_r           { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_T KEY_H>; bindings = <&kp ARDUX_COMBO_R>; };
		combo_f           { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_U KEY_E>; bindings = <&kp F>; };
		combo_g           { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_E KEY_S>; bindings = <&kp G>; };
		combo_u           { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_N KEY_T>; bindings = <&kp U>; };
		combo_y           { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_S KEY_T>; bindings = <&kp Y>; };
		combo_v           { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_E KEY_A>; bindings = <&kp V>; };
		combo_j           { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_O KEY_A>; bindings = <&kp J>; };
		combo_w           { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_U KEY_A>; bindings = <&kp W>; };
		combo_k           { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_N KEY_H>; bindings = <&kp K>; };
		combo_period       { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_U KEY_N>; bindings = <&kp PERIOD>; };
		combo_comma       { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_U KEY_T>; bindings = <&kp COMMA>; };
		combo_slash       { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_U KEY_H>; bindings = <&kp SLASH>; };
		combo_exclamation { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_O KEY_T>; bindings = <&kp EXCL>; };
		
		combo_seven { layers = <LAYER_ID_NUMBERS>; timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_U KEY_E>; bindings = <&kp N7>; };
		combo_eight { layers = <LAYER_ID_NUMBERS>; timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_E KEY_O>; bindings = <&kp N8>; };
		combo_nine  { layers = <LAYER_ID_NUMBERS>; timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_S KEY_N>; bindings = <&kp N9>; };
		combo_zero  { layers = <LAYER_ID_NUMBERS>; timeout-ms = <TIMEOUT_COMBO_2>; key-positions = <KEY_N KEY_T>; bindings = <&kp N0>; };

		/*****************************************
		 * 3 key combos
		 *****************************************/
		combo_esc              { timeout-ms = <TIMEOUT_COMBO_3>; key-positions = <KEY_U KEY_E KEY_H>; bindings = <&kp ESC>; };
		combo_layer_navigation { timeout-ms = <TIMEOUT_COMBO_3>; key-positions = <KEY_E KEY_S KEY_T>; bindings = <&tog LAYER_ID_NAVIGATION>; };

		combo_m            { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_3>; key-positions = <KEY_N KEY_T KEY_H>; bindings = <&kp M>; };
		combo_d            { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_3>; key-positions = <KEY_U KEY_E KEY_O>; bindings = <&kp D>; };
		combo_p            { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_3>; key-positions = <KEY_S KEY_T KEY_H>; bindings = <&kp P>; };
		combo_q            { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_3>; key-positions = <KEY_U KEY_O KEY_A>; bindings = <&kp Q>; };
		combo_x            { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_3>; key-positions = <KEY_E KEY_O KEY_A>; bindings = <&kp X>; };
		combo_l            { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_3>; key-positions = <KEY_S KEY_N KEY_T>; bindings = <&kp L>; };
		combo_single_quote { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_3>; key-positions = <KEY_U KEY_N KEY_T>; bindings = <&kp SQT>; };
		
		/*****************************************
		 * 4 key combos
		 *****************************************/
		combo_tab             { timeout-ms = <TIMEOUT_COMBO_4>; key-positions = <KEY_U KEY_E KEY_O KEY_H>; bindings = <&kp TAB>; };
		combo_space           { timeout-ms = <TIMEOUT_COMBO_4>; key-positions = <KEY_S KEY_N KEY_T KEY_H>; bindings = <&kp SPACE>; };
		combo_shift           { timeout-ms = <TIMEOUT_COMBO_4>; key-positions = <KEY_S KEY_E KEY_O KEY_A>; bindings = <&sk LSHFT>; };
		combo_layer_bt_select { timeout-ms = <TIMEOUT_COMBO_4>; key-positions = <KEY_U KEY_A KEY_S KEY_H>; bindings = <&tog BT_SEL>; };
		combo_bt_clr          { timeout-ms = <TIMEOUT_COMBO_4>; key-positions = <KEY_E KEY_O KEY_N KEY_T>; bindings = <&bt BT_CLR>; };

		combo_z         { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_4>; key-positions = <KEY_U KEY_E KEY_O KEY_A>; bindings = <&kp Z>; };
		combo_caps_lock { layers = <LAYER_ID_BASE>; timeout-ms = <TIMEOUT_COMBO_4>; key-positions = <KEY_U KEY_N KEY_T KEY_H>; bindings = <&kp CAPS>; };
	};
};

/ {
	behaviors {
		layer_base_kp: layer_base_kp { compatible = "zmk,behavior-hold-tap"; label = "layer_base_kp"; 
						#binding-cells = <2>; tapping_term_ms = <TIMEOUT_LAYER_HOLD>; flavor = "tap-preferred"; 
						bindings = <&mo>, <&kp>; };
		layer_numbers_kp: layer_numbers_kp { compatible = "zmk,behavior-hold-tap"; label = "layer_numbers_kp"; 
						#binding-cells = <2>; tapping_term_ms = <TIMEOUT_LAYER_HOLD>; flavor = "tap-preferred"; 
						bindings = <&mo>, <&kp>; };
		layer_symbols_kp: layer_symbols_kp { compatible = "zmk,behavior-hold-tap"; label = "layer_symbols_kp"; 
						#binding-cells = <2>; tapping_term_ms = <TIMEOUT_LAYER_HOLD>; flavor = "tap-preferred"; 
						bindings = <&mo>, <&kp>; };
		layer_parentheticals_kp: layer_parentheticals_kp { compatible = "zmk,behavior-hold-tap"; label = "layer_parentheticals_kp";
						#binding-cells = <2>; tapping_term_ms = <TIMEOUT_LAYER_HOLD>; flavor = "tap-preferred";
						bindings = <&mo>, <&kp>; };
		layer_extra_kp: layer_extra_kp { compatible = "zmk,behavior-hold-tap"; label = "layer_extra_kp";
						#binding-cells = <2>; tapping_term_ms = <TIMEOUT_LAYER_HOLD>; flavor = "tap-preferred";
						bindings = <&mo>, <&kp>; };
		ctrl_alt_kp: ctrl_alt_kp { compatible = "zmk,behavior-hold-tap"; label = "ctrl_alt_kp";
						#binding-cells = <2>; tapping_term_ms = <TIMEOUT_LAYER_HOLD>; flavor = "tap-preferred";
						bindings = <&sk>, <&sk>; };
	};
};
